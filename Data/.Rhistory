tiplabels()
tree$edge
tree$tip.label
tree1$tip.label
tree1$edge
plot(tree1)
nodelabels()
tiplabels()
head(tree$edge)
head(tree1$edge)
str(tree)
str(tree1)
library(ape)
library(phangorn)
library(phytools)
tree <- rcoal(10)
plot(tree)
nodelabels()
tiplabels()
tree1 <- add.tips(tree, c("A", "B", "C"), c(1,2,15))
plot(tree1)
nodelabels(frame='none')
tiplabels(frame='none')
nodelabels(frame='none', col='red')
tiplabels(frame='none', col='orange')
nodelabels(frame='none', col='red', cex=2)
plot(tree1)
nodelabels(frame='none', col='red', cex=2)
tiplabels(frame='none', col='orange', cex=2)
str(tree1)
tree1$edge.length
tree1$edge
path_tree='/Users/virginie/Documents/Basel_PhD/Visual_system_genes/Mapping/Geneious/Geneious_outputs/MA_haplotypes/R_trees/Final_trees_complete/')
path_tree='/Users/virginie/Documents/Basel_PhD/Visual_system_genes/Mapping/Geneious/Geneious_outputs/MA_haplotypes/R_trees/Final_trees_complete/'
best_ML=read.tree('RH1_CDS_w_haplotypes_outgroup_bootstrap_GTR_I_G_1.treefile')
best_ML=read.tree(paste0(path_tree, 'RH1_CDS_w_haplotypes_outgroup_bootstrap_GTR_I_G_1.treefile'))
best_ML
plot(path_tree)
path_tree='/Users/virginie/Documents/Basel_PhD/Visual_system_genes/Mapping/Geneious/Geneious_outputs/MA_haplotypes/R_trees/Final_trees_complete/'
best_ML=read.tree(paste0(path_tree, 'RH1_CDS_w_haplotypes_outgroup_bootstrap_GTR_I_G_1.treefile'))
plot(best_ML)
haplo_df=read.tree(paste0(path_tree, 'RH1_with_ref_LT_cichlids_complete_TRIBE_SP_ID_mafft_CDS_wo_gaps_mafft_w_haplotypes_w_species_tribes_colors_each.txt'))
head(haplo_df)
haplo_df=read.tree(paste0(path_tree, 'RH1_with_ref_LT_cichlids_complete_TRIBE_SP_ID_mafft_CDS_wo_gaps_mafft_w_haplotypes_w_species_tribes_colors_each.txt'))
head(haplo_df)
haplo_df=read.tree(paste0(path_tree, 'RH1_with_ref_LT_cichlids_complete_TRIBE_SP_ID_mafft_CDS_wo_gaps_mafft_w_haplotypes_w_species_tribes_colors_each.txt'), sep='\t')
haplo_df=read.csv(paste0(path_tree, 'RH1_with_ref_LT_cichlids_complete_TRIBE_SP_ID_mafft_CDS_wo_gaps_mafft_w_haplotypes_w_species_tribes_colors_each.txt'), sep='\t')
head(haplo_df)
haplo_df=read.csv(paste0(path_tree, 'RH1_with_ref_LT_cichlids_complete_TRIBE_SP_ID_mafft_CDS_wo_gaps_mafft_w_haplotypes_w_species_tribes_colors_each.txt'), sep='\t', header = T)
haplo_df=read.csv(paste0(path_tree, 'RH1_with_ref_LT_cichlids_complete_TRIBE_SP_ID_mafft_CDS_wo_gaps_mafft_w_haplotypes_w_species_tribes_colors_each.txt'), sep='\t', header = T); head(haplo_df); dim(haplo_df)
best_ML
haplo_df
str(best_ML)
best_ML$edge
best_ML$edge.length
str(best_ML)
best_ML$node.label
best_ML$tip.label
best_ML[best_ML$tip.label == 'haplo3',]
best_ML[best_ML$tip.label == 'haplo3']
match('haplo3', best_ML$tip.label)
best_ML_copy=best_ML
x='haplo3'
best_ML[best_ML$tip.label == x]
# get index in vector when match
match('x, best_ML$tip.label)
# get index in vector when match
matchx, best_ML$tip.label)
''
)
7^
''
x='haplo3'
# get index in vector when match
matchx, best_ML$tip.label)
# get index in vector when match
match(x, best_ML$tip.label)
best_ML_copy=best_ML
best_ML_copy <- add.tips(best_ML, paste0(x, '_bis'), match(x, best_ML$tip.label))
plot(best_ML_copy)
plot(best_ML_copy, cex = 0.25,
no.margin = T, label.offset = 0.001)
plot(best_ML_copy, cex = 0.5,
no.margin = T, label.offset = 0.001)
path_tree='/Users/virginie/Documents/'
path_tree='/Users/virginie/Documents/Basel_PhD/Visual_system_genes/Mapping/Geneious/Geneious_outputs/MA_haplotypes/R_trees/Final_trees_complete/'
path_out='/Users/virginie/Documents/'
pdf(width=11.69, height=16.5, paste0(path_out, 'test.pdf'))
plot(best_ML_copy, cex = 0.5,
no.margin = T, label.offset = 0.001)
dev.off()
str(best_ML_copy)
best_ML_copy$edge.length
best_ML_copy$edge
best_ML$tip.label
match(20, best_ML$edge)
match(20, best_ML$edge[,1])
match(20, best_ML$edge[1,])
match(20, best_ML$edge[2,])
match(20, best_ML$edge[,2])
nodelabels(frame='none', col='red', cex=2)
tiplabels(frame='none', col='orange', cex=2)
match(20, best_ML_copy$edge[,1])
match(20, best_ML_copy$edge[,2])
?add.tips
best_ML_copy=best_ML
best_ML_copy <- add.tips(best_ML, paste0(x, '_bis'), match(x, best_ML$tip.label), edge.length = 0)
plot(best_ML_copy)
path_out='/Users/virginie/Documents/'
pdf(width=11.69, height=16.5, paste0(path_out, 'test.pdf'))
plot(best_ML_copy, cex = 0.5,
no.margin = T, label.offset = 0.001)
dev.off()
subset(haplo_df, Haplotype_ID == h)
h = 'haplo0'
subset(haplo_df, Haplotype_ID == h)
nrow(subset(haplo_df, Haplotype_ID == h))
match_haplo
h='haplo100'
nb_row = nrow(subset(haplo_df, Haplotype_ID == h))
nb_row
match_haplo = match(h, best_ML$tip.label)
match_haplo
best_ML_copy=best_ML
count=0
while count != nb_row:
best_ML_copy <- add.tips(best_ML_copy, h, match_haplo, edge.length = 0)
count=0
best_ML_copy=best_ML
nb_row = nrow(subset(haplo_df, Haplotype_ID == h))
match_haplo = match(h, best_ML$tip.label)
count=0
while count != nb_row{
best_ML_copy <- add.tips(best_ML_copy, h, match_haplo, edge.length = 0)
count=count+1
}
best_ML_copy=best_ML
nb_row = nrow(subset(haplo_df, Haplotype_ID == h))
match_haplo = match(h, best_ML$tip.label)
count=0
while (count != nb_row) {
best_ML_copy <- add.tips(best_ML_copy, h, match_haplo, edge.length = 0)
count=count+1
}
best_ML_copy
str(best_ML_copy)
pdf(width=11.69, height=16.5, paste0(path_out, 'test.pdf'))
plot(best_ML_copy, cex = 0.5,
no.margin = T, label.offset = 0.001)
dev.off()
subset(haplo_df, Haplotype_ID == h)
match(h, best_ML_copy$tip.label)
best_ML_copy$tip.label
h
match(h, best_ML_copy$tip.label)
?match
subset(haplo_df, Haplotype_ID == h)
subsets
subsets = subset(haplo_df, Haplotype_ID == h)
subsets
subsets[,1]
subsets[1,]
subsets[1,]
subsets[1,]$Species_ID
subsets[1,]$Species_IDmatch_haplo
match_haplo
match(h, best_ML$tip.label)
best_ML$tip.label[107]
nb_to_add
subsets = subset(haplo_df, Haplotype_ID == h)
nb_to_add = nrow(subsets) - 1
match_haplo = match(h, best_ML$tip.label)
subsets
nb_to_add
match_haplo
nrow(subsets)
best_ML$tip.label[107] = paste0(subsets[nrow(subsets),]$Species_ID, '_', subsets[nrow(subsets),]$ID)
best_ML$tip.label[107]
match_haplo
best_ML_copy=best_ML
subsets = subset(haplo_df, Haplotype_ID == h)
nb_to_add = nrow(subsets) - 1
match_haplo = match(h, best_ML$tip.label)
best_ML$tip.label[match_haplo] = paste0(subsets[nrow(subsets),]$Species_ID, '_', subsets[nrow(subsets),]$ID)
count=0
while (count != nb_to_add) {
new_id = paste0(subsets[count,]$Species_ID, '_', subsets[count,]$ID)
best_ML_copy <- add.tips(best_ML_copy, new_id, match_haplo, edge.length = 0)
count=count+1
}
subsets
nb_to_add
match_haplo
best_ML$tip.label[match_haplo]
path_tree='/Users/virginie/Documents/Basel_PhD/Visual_system_genes/Mapping/Geneious/Geneious_outputs/MA_haplotypes/R_trees/Final_trees_complete/'
best_ML=read.tree(paste0(path_tree, 'RH1_CDS_w_haplotypes_outgroup_bootstrap_GTR_I_G_1.treefile'))
plot(best_ML)
haplo_df=read.csv(paste0(path_tree, 'RH1_with_ref_LT_cichlids_complete_TRIBE_SP_ID_mafft_CDS_wo_gaps_mafft_w_haplotypes_w_species_tribes_colors_each.txt'), sep='\t', header = T); head(haplo_df); dim(haplo_df)
best_ML_copy=best_ML
subsets = subset(haplo_df, Haplotype_ID == h)
nb_to_add = nrow(subsets) - 1
match_haplo = match(h, best_ML$tip.label)
best_ML$tip.label[match_haplo] = paste0(subsets[nrow(subsets),]$Species_ID, '_', subsets[nrow(subsets),]$ID)
count=0
while (count != nb_to_add) {
new_id = paste0(subsets[count,]$Species_ID, '_', subsets[count,]$ID)
best_ML_copy <- add.tips(best_ML_copy, new_id, match_haplo, edge.length = 0)
count=count+1
}
pdf(width=11.69, height=16.5, paste0(path_out, 'test.pdf'))
plot(best_ML_copy, cex = 0.5,
no.margin = T, label.offset = 0.001)
dev.off()
subsets
nb_to_add
best_ML_copy=best_ML
path_tree='/Users/virginie/Documents/Basel_PhD/Visual_system_genes/Mapping/Geneious/Geneious_outputs/MA_haplotypes/R_trees/Final_trees_complete/'
best_ML=read.tree(paste0(path_tree, 'RH1_CDS_w_haplotypes_outgroup_bootstrap_GTR_I_G_1.treefile'))
plot(best_ML)
haplo_df=read.csv(paste0(path_tree, 'RH1_with_ref_LT_cichlids_complete_TRIBE_SP_ID_mafft_CDS_wo_gaps_mafft_w_haplotypes_w_species_tribes_colors_each.txt'), sep='\t', header = T); head(haplo_df); dim(haplo_df)
best_ML_copy=best_ML
subsets = subset(haplo_df, Haplotype_ID == h)
nb_to_add = nrow(subsets)
match_haplo = match(h, best_ML$tip.label)
best_ML$tip.label[match_haplo] = paste0(subsets[nrow(subsets),]$Species_ID, '_', subsets[nrow(subsets),]$ID)
match_haplo
nb_to_add
nrow(subsets)
count=0
while (count != nb_to_add) {
new_id = paste0(subsets[count,]$Species_ID, '_', subsets[count,]$ID)
best_ML_copy <- add.tips(best_ML_copy, new_id, match_haplo, edge.length = 0)
count=count+1
}
for (h in unique(haplo_df$Haplotype_ID)){
subsets = subset(haplo_df, Haplotype_ID == h)
nb_to_add = nrow(subsets)
match_haplo = match(h, best_ML$tip.label)
best_ML$tip.label[match_haplo] = paste0(subsets[nrow(subsets),]$Species_ID, '_', subsets[nrow(subsets),]$ID)
count=0
while (count != nb_to_add) {
new_id = paste0(subsets[count,]$Species_ID, '_', subsets[count,]$ID)
best_ML_copy <- add.tips(best_ML_copy, new_id, match_haplo, edge.length = 0)
count=count+1
}
}
pdf(width=11.69, height=16.5, paste0(path_out, 'test.pdf'))
plot(best_ML_copy, cex = 0.5,
no.margin = T, label.offset = 0.001)
dev.off()
path_tree='/Users/virginie/Documents/Basel_PhD/Visual_system_genes/Mapping/Geneious/Geneious_outputs/MA_haplotypes/R_trees/Final_trees_complete/'
best_ML=read.tree(paste0(path_tree, 'RH1_CDS_w_haplotypes_outgroup_bootstrap_GTR_I_G_1.treefile'))
plot(best_ML)
haplo_df=read.csv(paste0(path_tree, 'RH1_with_ref_LT_cichlids_complete_TRIBE_SP_ID_mafft_CDS_wo_gaps_mafft_w_haplotypes_w_species_tribes_colors_each.txt'), sep='\t', header = T); head(haplo_df); dim(haplo_df)
best_ML_copy=best_ML
for (h in unique(haplo_df$Haplotype_ID)){
subsets = subset(haplo_df, Haplotype_ID == h)
nb_to_add = nrow(subsets)
match_haplo = match(h, best_ML$tip.label)
best_ML$tip.label[match_haplo] = paste0(subsets[nrow(subsets),]$Species_ID, '_', subsets[nrow(subsets),]$ID)
count=0
while (count != nb_to_add) {
new_id = paste0(subsets[count,]$Species_ID, '_', subsets[count,]$ID)
best_ML_copy <- add.tips(best_ML_copy, new_id, match_haplo, edge.length = 0)
count=count+1
}
}
path_tree='/Users/virginie/Documents/Basel_PhD/Visual_system_genes/Mapping/Geneious/Geneious_outputs/MA_haplotypes/R_trees/Final_trees_complete/'
best_ML=read.tree(paste0(path_tree, 'RH1_CDS_w_haplotypes_outgroup_bootstrap_GTR_I_G_1.treefile'))
plot(best_ML)
haplo_df=read.csv(paste0(path_tree, 'RH1_with_ref_LT_cichlids_complete_TRIBE_SP_ID_mafft_CDS_wo_gaps_mafft_w_haplotypes_w_species_tribes_colors_each.txt'), sep='\t', header = T); head(haplo_df); dim(haplo_df)
best_ML_copy=best_ML
subsets
subsets = subset(haplo_df, Haplotype_ID == h)
nb_to_add = nrow(subsets)
match_haplo = match(h, best_ML$tip.label)
subsets
nb_to_add
match_haplo
best_ML$tip.label[match_haplo] = paste0(subsets[nrow(subsets),]$Species_ID, '_', subsets[nrow(subsets),]$ID)
best_ML$tip.label[match_haplo]
count=0
while (count != nb_to_add) {
new_id = paste0(subsets[count,]$Species_ID, '_', subsets[count,]$ID)
best_ML_copy <- add.tips(best_ML_copy, new_id, match_haplo, edge.length = 0)
count=count+1
}
for (h in unique(haplo_df$Haplotype_ID)){
subsets = subset(haplo_df, Haplotype_ID == h)
nb_to_add = nrow(subsets)
match_haplo = match(h, best_ML$tip.label)
best_ML$tip.label[match_haplo] = paste0(subsets[nrow(subsets),]$Species_ID, '_', subsets[nrow(subsets),]$ID)
count=0
while (count != nb_to_add) {
new_id = paste0(subsets[count,]$Species_ID, '_', subsets[count,]$ID)
best_ML_copy <- add.tips(best_ML_copy, new_id, match_haplo, edge.length = 0)
count=count+1
}
}
pdf(width=11.69, height=16.5, paste0(path_out, 'test.pdf'))
plot(best_ML_copy, cex = 0.5,
no.margin = T, label.offset = 0.001)
dev.off()
path_tree='/Users/virginie/Documents/Basel_PhD/Visual_system_genes/Mapping/Geneious/Geneious_outputs/MA_haplotypes/R_trees/Final_trees_complete/'
best_ML=read.tree(paste0(path_tree, 'RH1_CDS_w_haplotypes_outgroup_bootstrap_GTR_I_G_1.treefile'))
plot(best_ML)
haplo_df=read.csv(paste0(path_tree, 'RH1_with_ref_LT_cichlids_complete_TRIBE_SP_ID_mafft_CDS_wo_gaps_mafft_w_haplotypes_w_species_tribes_colors_each.txt'), sep='\t', header = T); head(haplo_df); dim(haplo_df)
best_ML_copy=best_ML
subsets = subset(haplo_df, Haplotype_ID == h)
nb_to_add = nrow(subsets)
match_haplo = match(h, best_ML$tip.label)
best_ML$tip.label[match_haplo] = paste0(subsets[nrow(subsets),]$Species_ID, '_', subsets[nrow(subsets),]$ID)
count=0
while (count != nb_to_add) {
new_id = paste0(subsets[count,]$Species_ID, '_', subsets[count,]$ID)
best_ML_copy <- add.tips(best_ML_copy, new_id, match_haplo, edge.length = 0)
count=count+1
}
pdf(width=11.69, height=16.5, paste0(path_out, 'test.pdf'))
plot(best_ML_copy, cex = 0.5,
no.margin = T, label.offset = 0.001)
dev.off()
path_tree='/Users/virginie/Documents/Basel_PhD/Visual_system_genes/Mapping/Geneious/Geneious_outputs/MA_haplotypes/R_trees/Final_trees_complete/'
best_ML=read.tree(paste0(path_tree, 'RH1_CDS_w_haplotypes_outgroup_bootstrap_GTR_I_G_1.treefile'))
plot(best_ML)
haplo_df=read.csv(paste0(path_tree, 'RH1_with_ref_LT_cichlids_complete_TRIBE_SP_ID_mafft_CDS_wo_gaps_mafft_w_haplotypes_w_species_tribes_colors_each.txt'), sep='\t', header = T); head(haplo_df); dim(haplo_df)
best_ML_copy=best_ML
subsets = subset(haplo_df, Haplotype_ID == h)
nb_to_add = nrow(subsets)
match_haplo = match(h, best_ML$tip.label)
best_ML_copy$tip.label[match_haplo] = paste0(subsets[nrow(subsets),]$Species_ID, '_', subsets[nrow(subsets),]$ID)
count=0
while (count != nb_to_add) {
new_id = paste0(subsets[count,]$Species_ID, '_', subsets[count,]$ID)
best_ML_copy <- add.tips(best_ML_copy, new_id, match_haplo, edge.length = 0)
count=count+1
}
pdf(width=11.69, height=16.5, paste0(path_out, 'test.pdf'))
plot(best_ML_copy, cex = 0.5,
no.margin = T, label.offset = 0.001)
dev.off()
path_tree='/Users/virginie/Documents/Basel_PhD/Visual_system_genes/Mapping/Geneious/Geneious_outputs/MA_haplotypes/R_trees/Final_trees_complete/'
best_ML=read.tree(paste0(path_tree, 'RH1_CDS_w_haplotypes_outgroup_bootstrap_GTR_I_G_1.treefile'))
plot(best_ML)
haplo_df=read.csv(paste0(path_tree, 'RH1_with_ref_LT_cichlids_complete_TRIBE_SP_ID_mafft_CDS_wo_gaps_mafft_w_haplotypes_w_species_tribes_colors_each.txt'), sep='\t', header = T); head(haplo_df); dim(haplo_df)
best_ML_copy=best_ML
best_ML_copy=best_ML
for (h in unique(haplo_df$Haplotype_ID)){
subsets = subset(haplo_df, Haplotype_ID == h)
nb_to_add = nrow(subsets)
match_haplo = match(h, best_ML$tip.label)
best_ML_copy$tip.label[match_haplo] = paste0(subsets[nrow(subsets),]$Species_ID, '_', subsets[nrow(subsets),]$ID)
count=0
while (count != nb_to_add) {
new_id = paste0(subsets[count,]$Species_ID, '_', subsets[count,]$ID)
best_ML_copy <- add.tips(best_ML_copy, new_id, match_haplo, edge.length = 0)
count=count+1
}
}
pdf(width=11.69, height=16.5, paste0(path_out, 'test.pdf'))
plot(best_ML_copy, cex = 0.5,
no.margin = T, label.offset = 0.001)
dev.off()
pdf(width=11.69, height=16.5, paste0(path_out, 'test.pdf'))
plot(best_ML_copy, cex = 0.25,
no.margin = T, label.offset = 0.001)
dev.off()
subsets[nrow(subsets),]$Tribe
subsets[nrow(subsets),]$
s
subsets[nrow(subsets),]
haplo_df=read.csv(paste0(path_tree, 'RH1_with_ref_LT_cichlids_complete_TRIBE_SP_ID_mafft_CDS_wo_gaps_mafft_w_haplotypes_w_species_tribes_colors_each.txt'), sep='\t', header = T); head(haplo_df); dim(haplo_df)
best_ML_copy
best_ML_copy$edge[,1]
best_ML_copy$edge.length
best_ML_copy$edge.length + 0.0000000001
best_ML_copy_bis = best_ML_copy
best_ML_copy_bis$edge.length = best_ML_copy$edge.length + 0.0000000001
plot(best_ML_copy, cex = 0.25,
no.margin = T, label.offset = 0.001)
plot(best_ML_copy_bis, cex = 0.25,
no.margin = T, label.offset = 0.001)
best_ML_copy_bis = best_ML_copy
best_ML_copy_bis$edge.length = best_ML_copy$edge.length + 0.000001
plot(best_ML_copy_bis, cex = 0.25,
no.margin = T, label.offset = 0.001)
pdf(width=11.69, height=16.5, paste0(path_out, 'test.pdf'))
plot(best_ML_copy_bis, cex = 0.25,
no.margin = T, label.offset = 0.001)
dev.off()
best_ML_copy_bis = best_ML_copy
best_ML_copy_bis$edge.length = best_ML_copy$edge.length + 0.0001
pdf(width=11.69, height=16.5, paste0(path_out, 'test.pdf'))
plot(best_ML_copy_bis, cex = 0.25,
no.margin = T, label.offset = 0.001)
dev.off()
path_tree='/Users/virginie/Documents/Basel_PhD/Visual_system_genes/Mapping/Geneious/Geneious_outputs/MA_haplotypes/R_trees/Final_trees_complete/'
best_ML=read.tree(paste0(path_tree, 'RH1_CDS_w_haplotypes_outgroup_bootstrap_GTR_I_G_1.treefile'))
plot(best_ML)
haplo_df=read.csv(paste0(path_tree, 'RH1_with_ref_LT_cichlids_complete_TRIBE_SP_ID_mafft_CDS_wo_gaps_mafft_w_haplotypes_w_species_tribes_colors_each.txt'), sep='\t', header = T); head(haplo_df); dim(haplo_df)
best_ML_copy=best_ML
best_ML_copy$edge.length = best_ML$edge.length + 0.0001
for (h in unique(haplo_df$Haplotype_ID)){
subsets = subset(haplo_df, Haplotype_ID == h)
nb_to_add = nrow(subsets)
match_haplo = match(h, best_ML$tip.label)
best_ML_copy$tip.label[match_haplo] = paste0(subsets[nrow(subsets),]$Species_ID, '_', subsets[nrow(subsets),]$ID)
count=0
while (count != nb_to_add) {
new_id = paste0(subsets[count,]$Species_ID, '_', subsets[count,]$ID)
best_ML_copy <- add.tips(best_ML_copy, new_id, match_haplo, edge.length = 0)
count=count+1
}
}
plot(best_ML_copy, cex = 0.25,
no.margin = T, label.offset = 0.001)
best_ML_copy$edge.length + 0.0000000001
pdf(width=11.69, height=16.5, paste0(path_out, 'test.pdf'))
plot(best_ML_copy, cex = 0.25,
no.margin = T, label.offset = 0.001)
dev.off()
install.packages("RNeXML")
path_article='/scicore/home/salzburg/fityxu76/VisualSystem/Pipeline/Data/RH1_articles/'
library("RNeXML", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
Lala = RNeXML::nexml_read(paste0(path_article, '1-s2.0-S1055790316302007-mmc4.xml'))
paste0(path_article, '1-s2.0-S1055790316302007-mmc4.xml')
?nexml_read
Lala = nexml_read(paste0(path_article, '1-s2.0-S1055790316302007-mmc4.xml'))
lala_f = paste0(path_article, '1-s2.0-S1055790316302007-mmc4.xml')
Lala = nexml_read(lala_f)
lala_f = paste0(path_article, '1-s2.0-S1055790316302007-mmc4.xml')
lala_f
path_article='/Users/virginie/Downloads/ScienceDirect_files_21Sep2021_17-49-30/'
library("RNeXML")
lala_f = paste0(path_article, '1-s2.0-S1055790316302007-mmc4.xml')
Lala = nexml_read(lala_f)
Lala = nexml_read(lala_f); str(Lala); head(Lala)
Lala = nexml_read(lala_f); head(Lala)
Lala
View(Lala)
summary(Lala)
RNeXML::get_characters(Lala)
Lala$ncharacters
?nexml_read
Lala
Lala[1]
File = read.csv('Sequencing_files.txt')
setwd('/Users/virginie/Documents/Basel_PhD/Publications/RH1/GitHub/RH1_Ricci_et_al/Data')
File = read.csv('Sequencing_files.txt')
Dataset = read.csv('Dataset.txt', sep='\t')
headDataset
head(Dataset)
head(File)
IDs = Dataset$ID
IDs
id=IDs[1]
id
id=IDs[2]
id
Dataset$ID
Dataset$ID[-1]
IDs = as.character(Dataset$ID[-1])
IDs
length(Dataset$ID[-1])
id=IDs[1]; id
tmp = grep(id, File)
tmp
File = read.csv('Sequencing_files.txt', header=F)
names(File) = 'FileName'
head(File)
tmp = grep(id, File)
tmp
View(File)
id
tmp = grep(id, File$FileName)
tmp
id_f = grep(id, File$FileName)
id_f = grep(id, File$FileName)
nb_id_f = length(id_f)
nb_seqrun_id_f = nb_id_f / 2
nb_seqrun_id_f
NewFile = data.frame(matrix(ncol=2, nrow=0))
names(NewFile) = c('ID', 'Nb_SeqRun')
id=IDs[1]; id
for (id in IDs){
id_f = grep(id, File$FileName)
nb_id_f = length(id_f)
nb_seqrun_id_f = nb_id_f / 2
to_add = data.frame(ID=id, Nb_SeqRun=nb_seqrun_id_f)
NewFile = rbind(NewFile, to_add)
}
head(NewFile); dim(NewFile)
setwd('/Users/virginie/Documents/Basel_PhD/Publications/RH1/GitHub/RH1_Ricci_et_al/Data')
Dataset = read.csv('Dataset.txt', sep='\t')
IDs = as.character(Dataset$ID[-1])
File = read.csv('Sequencing_files.txt', header=F)
names(File) = 'FileName'
NewFile = data.frame(matrix(ncol=2, nrow=0))
names(NewFile) = c('ID', 'Nb_SeqRun')
id=IDs[1]; id
NewFile = data.frame(matrix(ncol=2, nrow=0))
names(NewFile) = c('ID', 'Nb_SeqRun')
id=IDs[1]; id
for (id in IDs){
id_f = grep(id, File$FileName)
nb_id_f = length(id_f)
nb_seqrun_id_f = nb_id_f / 2
to_add = data.frame(ID=id, Nb_SeqRun=nb_seqrun_id_f)
NewFile = rbind(NewFile, to_add)
}
write.table(NewFile, 'Data/Sequencing_files.txt_yes', quote = F, sep = '\t', col.names = F, row.names = F)
write.table(NewFile, 'Sequencing_files.txt_yes', quote = F, sep = '\t', col.names = F, row.names = F)
